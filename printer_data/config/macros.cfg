#####################################################################
#   Macros
#####################################################################

#   Learn M0 (Pause) to Klipper
[pause_resume]

[gcode_macro M0]
gcode:
  PAUSE


# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: SPEEDTEST SPEED=300 ACCEL=5000 ITERATIONS=10

[gcode_macro SPEEDTEST]
gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(3)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=SPEEDTEST
    
    # Output parameters to g-code terminal
    { action_respond_info("SPEEDTEST: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66

        _status_homing
        RESPOND MSG="Homing ..."
        M117 Homing ...
        G28
        
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                _status_leveling
                RESPOND MSG="Quad Gantry Leveling ..."
                M117 QGL ...
                QUAD_GANTRY_LEVEL
                _status_homing
                RESPOND MSG="Homing Z ..."
                M117 Homing Z ...
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{printer.toolhead.max_velocity*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        _status_homing
        RESPOND MSG="Homing ..."
        M117 Homing ...
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{printer.toolhead.max_velocity*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    _status_speedtest
    RESPOND MSG="Speedtest ..."
    M117 Speedtest ...
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small patternbox
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} 

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        _status_homing
        RESPOND MSG="Homing ..."
        M117 Homing ...
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{printer.toolhead.max_velocity*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=SPEEDTEST
    _status_ready
    M117 Oink Oink (OO)


#   Learn M600 (Filament change) to Klipper
[gcode_macro M600]
gcode:
    {% set X = params.X|default(50)|float %}
    {% set Y = params.Y|default(0)|float %}
    {% set Z = params.Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=M600_state
    RESPOND MSG="Change Filament ..."
    M117 Change Filament ...
    _FILAMENT_CHANGE_TUNE
    PAUSE
    G91
    G1 E-.8 F2700
    G1 Z{Z}
    G90
    G1 X{X} Y{Y} F3000
    G91
    G1 E-50 F1000
    RESTORE_GCODE_STATE NAME=M600_state


[gcode_macro PARK]
gcode:
    _check_homing
    _status_ready
    M117 Oink Oink (OO)
    {% set th = printer.toolhead %}
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y//2} Z30
    

   
[gcode_macro PRINT_START]
#   Use PRINT_START for the slicer starting script - please customise for your slicer of choice
gcode:
    M117 
    {% set target_bed = params.BED|int %}
    {% set target_extruder = params.EXTRUDER|int %}

    M106 S255                        ; set Cooling Fan to max for heat distribution
    
    {% if target_bed > 100 %}
      M140 S100                      ; Bed heat up to target temp
    {% else %}
      M140 S{target_bed}             ; limit Bed target temp
    {% endif %}
    M104 S150

    _status_homing
    RESPOND MSG="Homing ..."
    M117 Homing ...
    G90
    G28 X Y Z

    _status_heating
    RESPOND MSG="Heating to probing temperature ..."
    M117 Heating ...
    {% if target_bed > 100 %}
      M190 S100                      ; Bed heat up to target temp
    {% else %}
      M190 S{target_bed}             ; limit Bed target temp
    {% endif %}
    M109 S150

    CLEAN_NOZZLE    

    _status_leveling
    RESPOND MSG="Quad Gantry Leveling ..."
    M117 QGL ...
    QUAD_GANTRY_LEVEL

    _status_homing
    RESPOND MSG="Homing ..."
    M117 Homing ...
    G28
    G1 X125 Y127 Z5 F{printer.toolhead.max_velocity*60}                    
    G90                             ; absolute positioning
    #G1 Z10 F3000                   ; move nozzle away from bed
    
    CLEAN_NOZZLE

    _status_meshing
    RESPOND MSG="Creating Adaptive Mesh ..."
    M117 Meshing ...
    #M117
    BED_MESH_CLEAR
    BED_MESH_CALIBRATE
    #BED_MESH_PROFILE LOAD=100_deg
    
    _status_heating
    RESPOND MSG="Heating to printing Temperature ..."
    M117 Heating ...
    G1 X125 Y127 Z5 F{printer.toolhead.max_velocity*60}
    M190 S{target_bed}             ; Bed heat up to target temp
    M109 S{target_extruder}        ; Extruder heat up to target temp
        
    CLEAN_NOZZLE

    #Smart_Park
    _status_printing
    RESPOND MSG="Purging ..."
    M117 Purging ...
    LINE_PURGE
    M107                           ; turn off Cooling Fan
    RESPOND MSG="Printing ..."
    M117 Printing ...
  

[gcode_macro PRINT_END]
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
gcode:
    # safe anti-stringing move coords
    {% set th = printer.toolhead %}
    {% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    {% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    {% set z_safe = [th.position.z + 2, th.axis_maximum.z]|min %}
    
    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-5.0 F1800                 ; retract filament
    
    TURN_OFF_HEATERS
    
    G90                                      ; absolute positioning
    G0 X{x_safe} Y{y_safe} Z{z_safe} F20000  ; move nozzle to remove stringing
    G0 X{th.axis_maximum.x//2} Y{th.axis_maximum.y - 2} F3600  ; park nozzle at rear
    M107                                     ; turn off fan
    BED_MESH_CLEAR
    _PRINT_END_TUNE
    _status_ready
    M117 Oink Oink (OO)
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END


[gcode_macro _check_homing]
gcode:
 {% if "xyz" not in printer.toolhead.homed_axes %}
   _status_homing
   RESPOND MSG="Homing ..."
   M117 Homing ...
   G28
 {% endif %}


[gcode_macro wake_up]
gcode:
  _status_ready
  M117 Oink Oink (OO)
  SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=1 TRANSMIT=0
  SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=2 TRANSMIT=0
  SET_LED LED=btt_mini12864 RED=1 GREEN=0 BLUE=0 INDEX=3              # Letters
  SET_PIN PIN=caselight VALUE=1.00
